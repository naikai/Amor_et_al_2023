tf <- run_enrichR_groups(final.deg, dbs = "TF", prefix = paste0(prefix, ".Overall_DEG_TF"), summary = TRUE)
dbs <- names(go$res[[1]])
res <- go %>%
dplyr::select(-data) %>%
unnest(res) %>%
mutate(dbs = dbs) %>%
mutate(nrow = map_dbl(res, nrow)) %>%
filter(nrow > 2) %>%
unnest(res) %>%
mutate(Direction = gsub(".*_", "", Type)) %>%
mutate(Type = gsub("_[A-Z]+$", "", Type))
cur.res <- res
# Or we select top10 NES from our mouse
top.n <- 10
select.names <- res %>%
group_by(dbs, Type, Direction) %>%
arrange(desc(abs(Combined.Score))) %>%
dplyr::slice(1:top.n) %>%
ungroup() %>%
distinct(Type, dbs, Term, Direction, Combined.Score)
select.names.uniq <- res %>%
distinct(Type, Direction, Term, dbs, Combined.Score) %>%
left_join(dplyr::select(select.names, Type, Term, dbs), .) %>%
distinct() %>%
spread(Type, Combined.Score) %>%
mutate(across(contains("_vs"), ~ replace_na(.x, 0))) %>%
arrange(dbs, UP)
writexl::write_xlsx(list(select.names = select.names, select.names.uniq = select.names.uniq), "select.names.xlsx")
### heatmap with overlap circle
# https://stackoverflow.com/questions/14097136/row-column-heatmap-plot-with-overlayed-circle-fill-and-size-in-r
### manually controls the order
select.names.uniq <- select.names.uniq
p <- list()
dbs.res <- list()
for(cur.db in unique(cur.res$dbs)){
dbs.res[[cur.db]] <- cur.res %>%
filter(dbs == cur.db) %>%
inner_join(distinct(select.names.uniq, dbs, Term), ., by = c("dbs", "Term")) %>%
# select the highest (unique) Combined.Score for every dbs + Term + Type
group_by(Term, Type) %>%
arrange(desc(abs(Combined.Score))) %>%
dplyr::slice(1) %>%
ungroup() %>%
# Combined.Score is always greater than 0, convert < 1 into 1, so that log2 will be 0
# Adjust Combined.Score based on its Direction, convert DN into negative Combined.Score
mutate(Combined.Score = ifelse(Combined.Score < 1, 1, Combined.Score)) %>%
mutate(Score = case_when(Direction == "UP" ~ log2(Combined.Score),
Direction == "DN" ~ -log2(Combined.Score),
TRUE ~ 0)) %>%
mutate(Score = ifelse(abs(Score) > 10, sign(Score) * 10, Score)) %>%
ungroup() %>%
# change here so that we know if it's UP or DN
mutate(Combined.Score = ifelse(Direction == "UP", Combined.Score, -Combined.Score)) %>%
mutate(Term = gsub("\\(GO:.*", "", Term)) %>%
mutate(Type = gsub("_.*", "", Type)) %>%
arrange(Type, desc(Combined.Score)) %>% # sort Type
mutate(Term = factor(Term, levels=rev(unique(Term)))) %>%
mutate(`Adjusted.P.value` = case_when(`Adjusted.P.value` == 0 ~ 0.0001, TRUE ~ `Adjusted.P.value`)) %>%
dplyr::select(Term, Type, Score, Combined.Score, `Adjusted.P.value`, Direction) %>%
complete(Term, Type) %>%
ungroup()
p[[cur.db]] <- dbs.res[[cur.db]] %>%
mutate(Term = substr(Term, 1, 38)) %>%
ggplot(aes(x=Type, y=Term)) +
geom_tile(aes(fill = Score), colour = "grey80", width=1, height=1, size=2) +
geom_point(aes(colour = -`Adjusted.P.value`, size = -`Adjusted.P.value`), show.legend = FALSE) +
geom_text(aes(label = round(Combined.Score, 1)), size = 9) +
scale_fill_gradientn(colours = c("#00009D", "#76D6FF", "white", "#FB8072", "#B31B1B"),
values = scales::rescale(c(-10, -1, 0, 1, 10)),
limits = c(-10, 10),
na.value = "white") +
scale_color_gradient(low = "white", high = "#EEEEEE") +
scale_size(range = c(1, 5)) +
theme_classic() +
xlab("") +
ylab("") +
ggtitle(paste(gsub("_20200716", "", cur.db))) +
theme(axis.text.y = element_text(size=20, face = "bold"),
legend.key.height= unit(1, 'cm'),
legend.key.width= unit(1, 'cm'),
legend.text = element_text(size= 15),
legend.title = element_text(size=20),
plot.title = element_text(size = 40),
axis.text.x = element_text(size=20, angle = 00, vjust = 0.5, face = "bold"))
}
### save for other plots
writexl::write_xlsx(dbs.res, paste0(prefix, ".heatmap.res.xlsx"))
pdf(glue::glue("{prefix}.heatmap.pdf"), height=24, width=20)
for(i in 1:length(p)){
print(p[[i]])
}
dev.off()
### lollipop ###
# https://www.jamesgammerman.com/post/making-a-lollipop-chart/
# separate into 3 different Timepoints, D7, D14, Combined
ymax <- 12
point.alpha <- 0.9
library(ggnewscale)
for(cur.dbs in names(dbs.res)){
# for(cur.dbs in "KEGG_2019_Mouse"){
top.term <- dbs.res[[cur.dbs]] %>%
mutate(Term = as.character(Term)) %>%
group_by(Term) %>%
arrange(desc(abs(Score))) %>%
dplyr::slice(1) %>%
ungroup() %>%
group_by(Type, Direction) %>%
arrange(Type, Direction, desc(abs(Score))) %>%
dplyr::slice(1:8) #%>%
# arrange(Type, Direction, abs(Score))
p <- dbs.res[[cur.dbs]] %>%
filter(Term %in% top.term$Term) %>%
mutate(Term = substr(Term, 1, 38)) %>%
# for each Term, select higher Abs(Combined.Score)
group_by(Term) %>%
arrange(desc(abs(Combined.Score))) %>%
dplyr::slice(1) %>%
ungroup() %>%
arrange(Type, Score) %>%
mutate(Term = factor(Term, levels = unique(Term))) %>%
mutate(logP = -log10(Adjusted.P.value)) %>%
ggplot(aes(x=Score, y=Term)) +
geom_segment(aes(x=0, xend=Score, y=Term, yend=Term), color="grey60") +
geom_point(aes(size = logP, color = abs(Score)), alpha = point.alpha) +
scale_size(range = c(5, 12)) +
scale_colour_gradient2(
low = "green",
mid = "yellow",
high = "red",
midpoint = 5,
space = "Lab",
na.value = "grey50",
guide = "colourbar",
aesthetics = "colour"
) +
theme_light() +
scale_x_continuous(limits = c(-ymax, ymax), breaks = seq(-ymax, ymax, 4)) +
geom_vline(xintercept = 0, linetype = "longdash") +
geom_hline(yintercept = 0, linetype = "longdash") +
# coord_flip() +
theme(
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.x = element_text(size = 18),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(size = 20, face = "bold")
) +
ggtitle(paste(cur.dbs, sep=":")) +
xlab("log2(Combined Score, Directional)") +
ylab("")
pdf(paste(cur.dbs, "lollipop.pdf", sep="."), width = 9, height = 8)
print(p)
dev.off()
}
pbmc <- qs::qread(paste0(prefix, ".pbmc.ReIdent.qs"))
paper.features <- c("Pecam1", "Cdh5",
"Dcn", "Igfbp4", "Lama2", "Col6a1",  # Fibroblast
"Epcam", "Krt8", "Krt18", "Cldn3", # Ductal
"Cd3d", "Il7r", "Cd3e", # Tcell
"Nkg7", "Ncr1", "Klrb1b", # NK
"Lst1", "Csf3r", "Il1b",  # Monocyte
"Adgre1", "C1qa", "C1qb", # Macrophage
"Zbtb46", "Flt3", "Clec10a",  # DC
"Siglech", "Ccr9", "Ly6c2",   # pDC
"Mki67", "Birc5", "Top2a", "Ube2c", # Cycling
"Cd19", "Ms4a1", "Blk", "Cd22", "Bank1", # Bcell
"Jchain", "Derl3", "Fkbp11")
paper.celltype <- c("Endothelial",
"Fibroblast", "Epithelial",
"Tcell", "NK",
"Monocyte",
"Macrophage",
"DC",
"pDC",
"Dividing",
"Bcell", "Plasma")
pbmc$Cell_type <- factor(pbmc$Cell_type, levels = rev(paper.celltype))
p <- DotPlot(pbmc, features = paper.features, group.by = "Cell_type",
cols = c("Reds"), dot.scale = 9) +
RotatedAxis() +
xlab("") +
ylab("") +
scale_colour_gradient2(low = "gray90", mid = "#FB8072", high = "#E41A1C") +
scale_x_discrete(position = "top") +
theme(axis.line = element_blank(),
axis.text.x.top = element_text(size = 16, vjust = 0, hjust = 0),
axis.text.y = element_text(size = 16),
panel.border = element_rect(color = "black", size = 1))
pdf(paste0(prefix, ".NewCelltype.Paper_dotplot.pdf"), width=15.5, height=7)
print(p)
dev.off()
library(ggpubr)
pbmc <- qs::qread(paste0(prefix, ".pbmc.ReIdent.qs"))
res <- pbmc@meta.data %>%
group_by(Cell_type, SampleID) %>%
summarise(n = n()) %>%
group_by(SampleID) %>%
mutate(pct = n / sum(n)) %>%
left_join(., pbmc@meta.data %>% dplyr::distinct(SampleID, uPAR)) %>%
dplyr::select(Cell_type, SampleID, pct, uPAR) %>%
group_by(Cell_type, uPAR) %>%
mutate(mean = mean(pct),
sd = sd(pct),
sem = plotrix::std.error(pct))
width <- 0.8
pd <- position_dodge()
p <- res %>%
ggplot(aes(x = Cell_type, y = mean, fill = uPAR)) +
geom_bar(stat = "identity", color = "gray20", size = 0.3, width = width, position=pd) +
geom_point(aes(x = Cell_type, y = pct), position = position_dodge(width = width),
alpha = 0.5, size = 1.5)  +
geom_errorbar(aes(ymin = mean-sem, ymax = mean+sem),
size = 0.2,
width = width, colour = "black", alpha = 0.9,
position = pd) +
geom_errorbarh(aes(x = Cell_type,
xmin = (Cell_type - 0.1),
xmax = (Cell_type + 0.1)),
size = 0.3) +
scale_fill_manual(values = c("uPAR_plus" = "#FF2A2A", "uPAR_neg" = "#0072B2")) +
ggthemes::theme_base() +
xlab("") +
ylab("Porportion of Cells") +
scale_y_continuous(limits = c(0, 0.9), expand = expansion(mult = c(0, -.1))) +
theme(panel.grid.minor = element_blank(),
axis.text.x = element_text(size = 16, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14, face = "bold"),
strip.text = element_text(size = 18)) +
stat_compare_means(aes(group = uPAR), method = "t.test", label.y.npc = 0.8, label = "p.format")
pdf(paste(prefix, "uPAR_boxplot_SEM.pdf", sep="."), height=6, width=10)
print(p)
dev.off()
# pbmc <- qs::qread(paste0(prefix, ".pbmc.ReIdent.qs"))
pbmc <- qs::qread("/Users/hoy/Copy/MSKCC/Corina/Aging/GitHub/Pancreas/Corina_Aging_PDAC_v4.pbmc.ReIdent.qs")
# geneset.file <- "/Users/hoy/Copy/MSKCC/Senescence_Comparison/Senescence_and_SASP_genesets_2022_mouse.xlsx"
geneset.file <- "/Users/hoy/Copy/MSKCC/Corina/Aging/GitHub/Pancreas/Senescence_and_SASP_genesets_2022_mouse.xlsx"
geneset.sheet <- "Senescence_survelliance"
pdac_features <- readxl::read_excel(geneset.file, sheet = geneset.sheet)
pbmc <- AddModuleScore(object = pbmc,
features = pdac_features,
nbin = 22,
ctrl = 100,
name = 'PDAC') %>%
replace_ModuleScore_feature_name_v2(., pdac_features, name = "PDAC")
### combine starts
score.cutoff <- 0.05
paper.celltype <- c("Endothelial",
"Fibroblast", "Epithelial",
"Tcell", "NK",
"Monocyte",
"Macrophage",
"DC",
"pDC",
"Dividing",
"Bcell", "Plasma")
res <- pbmc@meta.data %>%
convert_data_to_tibble(name = "ID") %>%
dplyr::select(ID, uPAR, Cell_type:last_col()) %>%
gather(Senescence, score, -ID, -uPAR, -Cell_type) %>%
mutate(Group = ifelse(score >= score.cutoff, "Sene_High", "Sene_Low")) %>%
filter(Group == "Sene_High") %>%
group_by(Senescence) %>%
dplyr::count(uPAR, Cell_type, Group) %>%
group_by(Senescence, Cell_type) %>%
mutate(pct = n / sum(n) * 100) %>%
mutate(Cell_type = factor(Cell_type, levels = rev(paper.celltype))) %>%
mutate(uPAR_Sene = paste(uPAR, Group, sep="_"))
p <- res %>%
ggplot(aes(x = Cell_type, y = pct, fill = uPAR_Sene)) +
geom_bar(stat = "identity", color = "gray20", size = 0.3) +
geom_text(aes(label = signif(pct, 2)), position = position_stack(vjust = 0.5), size = 4) +
scale_fill_manual(values = c("uPAR_neg_Sene_High" = "#477FE4",
"uPAR_plus_Sene_High" = "#e11444")) +
theme_bw() +
coord_flip() +
facet_wrap(~ Senescence, nrow = 3, scales = "free_y") +
xlab("") +
ylab("Porportion of Cells") +
theme(panel.grid.minor = element_blank(),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
strip.text = element_text(size = 18))
pdf(paste0(prefix, ".SenescenceHigh_Celltype_Proportion2.pdf"), width=33, height=15)
print(p)
dev.off()
pbmc <- qs::qread(paste0(prefix, ".pbmc.ReIdent.qs"))
Idents(pbmc) <- "uPAR"
deg.res.raw <- list()
deg.res <- list()
cur.treatment <- RunPresto(pbmc, assay = "RNA",
ident.1 = "uPAR_plus",
ident.2 = "uPAR_neg",
verbose = TRUE) %>%
convert_data_to_tibble(name = "Gene") %>%
mutate(Group = ifelse(avg_log2FC > 0, "UP", "DN")) %>%
mutate(Group = factor(Group, levels = c("UP", "DN"))) %>%
arrange(Group, desc(avg_log2FC))
deg.res.raw <- cur.treatment
deg.res <- cur.treatment %>%
filter(abs(avg_log2FC) > 0.5849625 & p_val_adj < 0.1)
my.genes <- deg.res %>%
group_by(Group) %>%
arrange(desc(abs(avg_log2FC))) %>%
dplyr::slice(1:4)
### Plot DEG
writexl::write_xlsx(deg.res.raw, paste0(prefix, ".Overall.DEG.raw.xlsx"))
writexl::write_xlsx(deg.res, paste0(prefix, ".Overall.DEG.xlsx"))
### run GOTF
final.deg <- deg.res %>%
dplyr::select(Group, Gene) %>%
group_by(Group) %>%
filter(n() > 5) %>%
ungroup()
### also run enrichR for significant genes
go <- run_enrichR_groups(final.deg, dbs = "GO", prefix = paste0(prefix, ".Overall_DEG_GO"))
tf <- run_enrichR_groups(final.deg, dbs = "TF", prefix = paste0(prefix, ".Overall_DEG_TF"), summary = TRUE)
dbs <- names(go$res[[1]])
res <- go %>%
dplyr::select(-data) %>%
unnest(res) %>%
mutate(dbs = dbs) %>%
mutate(nrow = map_dbl(res, nrow)) %>%
filter(nrow > 2) %>%
unnest(res) %>%
mutate(Direction = gsub(".*_", "", Type)) %>%
mutate(Type = gsub("_[A-Z]+$", "", Type))
cur.res <- res
# Or we select top10 NES from our mouse
top.n <- 10
select.names <- res %>%
group_by(dbs, Type, Direction) %>%
arrange(desc(abs(Combined.Score))) %>%
dplyr::slice(1:top.n) %>%
ungroup() %>%
distinct(Type, dbs, Term, Direction, Combined.Score)
select.names.uniq <- res %>%
distinct(Type, Direction, Term, dbs, Combined.Score) %>%
left_join(dplyr::select(select.names, Type, Term, dbs), .) %>%
distinct() %>%
spread(Type, Combined.Score) %>%
mutate(across(contains("_vs"), ~ replace_na(.x, 0))) %>%
arrange(dbs, UP)
writexl::write_xlsx(list(select.names = select.names, select.names.uniq = select.names.uniq), "select.names.xlsx")
### heatmap with overlap circle
select.names.uniq <- select.names.uniq
p <- list()
dbs.res <- list()
for(cur.db in unique(cur.res$dbs)){
dbs.res[[cur.db]] <- cur.res %>%
filter(dbs == cur.db) %>%
inner_join(distinct(select.names.uniq, dbs, Term), ., by = c("dbs", "Term")) %>%
# select the highest (unique) Combined.Score for every dbs + Term + Type
group_by(Term, Type) %>%
arrange(desc(abs(Combined.Score))) %>%
dplyr::slice(1) %>%
ungroup() %>%
# Combined.Score is always greater than 0, convert < 1 into 1, so that log2 will be 0
# Adjust Combined.Score based on its Direction, convert DN into negative Combined.Score
mutate(Combined.Score = ifelse(Combined.Score < 1, 1, Combined.Score)) %>%
mutate(Score = case_when(Direction == "UP" ~ log2(Combined.Score),
Direction == "DN" ~ -log2(Combined.Score),
TRUE ~ 0)) %>%
mutate(Score = ifelse(abs(Score) > 10, sign(Score) * 10, Score)) %>%
ungroup() %>%
# change here so that we know if it's UP or DN
mutate(Combined.Score = ifelse(Direction == "UP", Combined.Score, -Combined.Score)) %>%
mutate(Term = gsub("\\(GO:.*", "", Term)) %>%
mutate(Type = gsub("_.*", "", Type)) %>%
arrange(Type, desc(Combined.Score)) %>% # sort Type
mutate(Term = factor(Term, levels=rev(unique(Term)))) %>%
mutate(`Adjusted.P.value` = case_when(`Adjusted.P.value` == 0 ~ 0.0001, TRUE ~ `Adjusted.P.value`)) %>%
dplyr::select(Term, Type, Score, Combined.Score, `Adjusted.P.value`, Direction) %>%
complete(Term, Type) %>%
ungroup()
}
### save for other plots
writexl::write_xlsx(dbs.res, paste0(prefix, ".heatmap.res.xlsx"))
### lollipop ###
ymax <- 12
point.alpha <- 0.9
library(ggnewscale)
for(cur.dbs in names(dbs.res)){
top.term <- dbs.res[[cur.dbs]] %>%
mutate(Term = as.character(Term)) %>%
group_by(Term) %>%
arrange(desc(abs(Score))) %>%
dplyr::slice(1) %>%
ungroup() %>%
group_by(Type, Direction) %>%
arrange(Type, Direction, desc(abs(Score))) %>%
dplyr::slice(1:8) #%>%
p <- dbs.res[[cur.dbs]] %>%
filter(Term %in% top.term$Term) %>%
mutate(Term = substr(Term, 1, 38)) %>%
# for each Term, select higher Abs(Combined.Score)
group_by(Term) %>%
arrange(desc(abs(Combined.Score))) %>%
dplyr::slice(1) %>%
ungroup() %>%
arrange(Type, Score) %>%
mutate(Term = factor(Term, levels = unique(Term))) %>%
mutate(logP = -log10(Adjusted.P.value)) %>%
ggplot(aes(x=Score, y=Term)) +
geom_segment(aes(x=0, xend=Score, y=Term, yend=Term), color="grey60") +
geom_point(aes(size = logP, color = abs(Score)), alpha = point.alpha) +
scale_size(range = c(5, 12)) +
scale_colour_gradient2(
low = "green",
mid = "yellow",
high = "red",
midpoint = 5,
space = "Lab",
na.value = "grey50",
guide = "colourbar",
aesthetics = "colour"
) +
theme_light() +
scale_x_continuous(limits = c(-ymax, ymax), breaks = seq(-ymax, ymax, 4)) +
geom_vline(xintercept = 0, linetype = "longdash") +
geom_hline(yintercept = 0, linetype = "longdash") +
# coord_flip() +
theme(
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.x = element_text(size = 18),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 12),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(size = 20, face = "bold")
) +
ggtitle(paste(cur.dbs, sep=":")) +
xlab("log2(Combined Score, Directional)") +
ylab("")
pdf(paste(cur.dbs, "lollipop.pdf", sep="."), width = 9, height = 8)
print(p)
dev.off()
}
library(tidyverse)
library(Seurat)
library(SeuratData)
library(SeuratDisk)
library(SeuratWrappers)
library(RColorBrewer)
library(Matrix)
library(cowplot)
library(patchwork)
library(future) # multicore
plan("multisession", workers = 12)
options(future.globals.maxSize = 8000 * 1024^2)
folder <- params$workdir
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = folder)
setwd(folder)
source("~/Copy/MSKCC/Rscripts/helper.R")
prefix <- params$prefix
pbmc <- qs::qread(paste0(prefix, ".pbmc.ReIdent.qs"))
geneset.file <- "/Users/hoy/Copy/MSKCC/Corina/Aging/GitHub/Pancreas/Senescence_and_SASP_genesets_2022_mouse.xlsx"
geneset.sheet <- "Senescence_survelliance"
sene_features <- readxl::read_excel(geneset.file, sheet = geneset.sheet)
pbmc <- AddModuleScore(object = pbmc,
features = sene_features,
nbin = 22,
ctrl = 100,
name = 'PDAC') %>%
replace_ModuleScore_feature_name_v2(., sene_features, name = "PDAC")
### combine starts
score.cutoff <- 0.05
paper.celltype <- c("Endothelial",
"Fibroblast", "Epithelial",
"Tcell", "NK",
"Monocyte",
"Macrophage",
"DC",
"pDC",
"Dividing",
"Bcell", "Plasma")
res <- pbmc@meta.data %>%
convert_data_to_tibble(name = "ID") %>%
dplyr::select(ID, uPAR, Cell_type:last_col()) %>%
gather(Senescence, score, -ID, -uPAR, -Cell_type) %>%
mutate(Group = ifelse(score >= score.cutoff, "Sene_High", "Sene_Low")) %>%
filter(Group == "Sene_High") %>%
group_by(Senescence) %>%
dplyr::count(uPAR, Cell_type, Group) %>%
group_by(Senescence, Cell_type) %>%
mutate(pct = n / sum(n) * 100) %>%
mutate(Cell_type = factor(Cell_type, levels = rev(paper.celltype))) %>%
mutate(uPAR_Sene = paste(uPAR, Group, sep="_"))
p <- res %>%
ggplot(aes(x = Cell_type, y = pct, fill = uPAR_Sene)) +
geom_bar(stat = "identity", color = "gray20", size = 0.3) +
geom_text(aes(label = signif(pct, 2)), position = position_stack(vjust = 0.5), size = 4) +
scale_fill_manual(values = c("uPAR_neg_Sene_High" = "#477FE4",
"uPAR_plus_Sene_High" = "#e11444")) +
theme_bw() +
coord_flip() +
facet_wrap(~ Senescence, nrow = 3, scales = "free_y") +
xlab("") +
ylab("Porportion of Cells") +
theme(panel.grid.minor = element_blank(),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
strip.text = element_text(size = 18))
pdf(paste0(prefix, ".SenescenceHigh_Celltype_Proportion2.pdf"), width=33, height=15)
print(p)
dev.off()
